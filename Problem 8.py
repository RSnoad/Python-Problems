# Find 13 adjacent digits that have greatest product


# Number stored as string with newlines due to length.
number = '73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450\
'

# Declare variables for the loop and to store largest product.
n = 0
largest = 0
while n < len(number) - 13:
    # This seems awful but I couldn't find a more elegant way to slice the number
    # and multiply the digits together( try list(map(int,number) and reduce or prod when have some time?)
    n1 = number[0 + n]
    n2 = number[1 + n]
    n3 = number[2 + n]
    n4 = number[3 + n]
    n5 = number[4 + n]
    n6 = number[5 + n]
    n7 = number[6 + n]
    n8 = number[7 + n]
    n9 = number[8 + n]
    n10 = number[9 + n]
    n11 = number[10 + n]
    n12 = number[11 + n]
    n13 = number[12 + n]
    product = int(n1) * int(n2) * int(n3) * int(n4) * int(n5) * int(n6) * int(n7) * int(n8) * int(n9)\
        * int(n10) * int(n11) * int(n12) * int(n13)
    if product > largest:
        largest = product
    n += 1

print(largest)
# print(list(map(int, number)))

